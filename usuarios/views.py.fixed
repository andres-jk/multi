from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import HttpResponse
from django.utils import timezone
from django.urls import reverse
from django.conf import settings
from django.contrib.auth.forms import PasswordChangeForm
from django.contrib.auth import update_session_auth_hash
from .forms import ClienteForm, UsuarioForm, DireccionForm, MetodoPagoForm
from .models import Usuario, Cliente, Direccion, MetodoPago
from productos.models import Producto
from pedidos.models import Pedido, DetallePedido
import decimal
import os
from io import BytesIO
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib import colors
from reportlab.lib.units import cm
from datetime import datetime
import random
import string
import uuid

def inicio(request):
    if request.user.is_authenticated:
        if request.user.rol in ['admin', 'empleado']:
            return redirect('pedidos:lista_pedidos')
        else:
            return redirect('inicio_cliente')
    return render(request, 'usuarios/inicio.html')

def inicio_cliente(request):
    if request.user.is_authenticated and request.user.rol in ['admin', 'empleado']:
        return redirect('pedidos:lista_pedidos')
    
    productos_destacados = Producto.objects.all().order_by('?')[:4]
    return render(request, 'usuarios/inicio_cliente.html', {'productos': productos_destacados})

def registro(request):
    if request.method == 'POST':
        usuario_form = UsuarioForm(request.POST, prefix='usuario')
        cliente_form = ClienteForm(request.POST, prefix='cliente')
        direccion_form = DireccionForm(request.POST, prefix='direccion')

        if usuario_form.is_valid() and cliente_form.is_valid() and direccion_form.is_valid():
            # Guardar usuario
            usuario = usuario_form.save(commit=False)
            usuario.rol = 'cliente'
            usuario.set_password(usuario_form.cleaned_data['password'])
            usuario.save()
            
            # Guardar cliente
            cliente = cliente_form.save(commit=False)
            cliente.usuario = usuario
            cliente.save()
            
            # Guardar dirección
            direccion = direccion_form.save(commit=False)
            direccion.cliente = cliente
            direccion.save()
            
            messages.success(request, "¡Registro exitoso! Ahora puedes iniciar sesión.")
            return redirect('usuarios:login')
    else:
        usuario_form = UsuarioForm(prefix='usuario')
        cliente_form = ClienteForm(prefix='cliente')
        direccion_form = DireccionForm(prefix='direccion')
    
    context = {
        'usuario_form': usuario_form,
        'cliente_form': cliente_form,
        'direccion_form': direccion_form,
    }
    return render(request, 'usuarios/registro.html', context)

def iniciar_sesion(request):
    if request.user.is_authenticated:
        if request.user.rol in ['admin', 'empleado']:
            return redirect('pedidos:lista_pedidos')
        return redirect('inicio_cliente')
    
    if request.method == 'POST':
        email = request.POST.get('email')
        password = request.POST.get('password')
        
        user = authenticate(request, username=email, password=password)
        
        if user is not None:
            login(request, user)
            next_url = request.GET.get('next')
            if next_url:
                return redirect(next_url)
            elif user.rol in ['admin', 'empleado']:
                return redirect('pedidos:lista_pedidos')
            else:
                return redirect('inicio_cliente')
        else:
            messages.error(request, "Email o contraseña incorrectos.")
    
    return render(request, 'usuarios/login.html')

@login_required
def cerrar_sesion(request):
    logout(request)
    return redirect('usuarios:inicio')

@login_required
def perfil(request):
    user = request.user
    cliente = Cliente.objects.get(usuario=user)
    direcciones = Direccion.objects.filter(cliente=cliente)
    metodos_pago = MetodoPago.objects.filter(usuario=user)
    
    context = {
        'usuario': user,
        'cliente': cliente,
        'direcciones': direcciones,
        'metodos_pago': metodos_pago,
    }
    return render(request, 'usuarios/perfil.html', context)

@login_required
def actualizar_perfil(request):
    user = request.user
    cliente = Cliente.objects.get(usuario=user)
    
    if request.method == 'POST':
        usuario_form = UsuarioForm(request.POST, instance=user, prefix='usuario')
        cliente_form = ClienteForm(request.POST, instance=cliente, prefix='cliente')
        
        if usuario_form.is_valid() and cliente_form.is_valid():
            usuario_form.save()
            cliente_form.save()
            messages.success(request, "Perfil actualizado correctamente.")
            return redirect('usuarios:perfil')
    else:
        usuario_form = UsuarioForm(instance=user, prefix='usuario')
        cliente_form = ClienteForm(instance=cliente, prefix='cliente')
    
    context = {
        'usuario_form': usuario_form,
        'cliente_form': cliente_form,
    }
    return render(request, 'usuarios/actualizar_perfil.html', context)

@login_required
def cambiar_contrasena(request):
    if request.method == 'POST':
        form = PasswordChangeForm(request.user, request.POST)
        if form.is_valid():
            user = form.save()
            update_session_auth_hash(request, user)
            messages.success(request, 'Tu contraseña ha sido actualizada.')
            return redirect('usuarios:perfil')
        else:
            messages.error(request, 'Por favor corrige el error.')
    else:
        form = PasswordChangeForm(request.user)
    return render(request, 'usuarios/cambiar_contrasena.html', {'form': form})

@login_required
def agregar_direccion(request):
    cliente = Cliente.objects.get(usuario=request.user)
    
    if request.method == 'POST':
        form = DireccionForm(request.POST)
        if form.is_valid():
            direccion = form.save(commit=False)
            direccion.cliente = cliente
            direccion.save()
            messages.success(request, "Dirección agregada correctamente.")
            return redirect('usuarios:perfil')
    else:
        form = DireccionForm()
    
    return render(request, 'usuarios/agregar_direccion.html', {'form': form})

@login_required
def editar_direccion(request, direccion_id):
    direccion = get_object_or_404(Direccion, id=direccion_id, cliente__usuario=request.user)
    
    if request.method == 'POST':
        form = DireccionForm(request.POST, instance=direccion)
        if form.is_valid():
            form.save()
            messages.success(request, "Dirección actualizada correctamente.")
            return redirect('usuarios:perfil')
    else:
        form = DireccionForm(instance=direccion)
    
    return render(request, 'usuarios/editar_direccion.html', {'form': form})

@login_required
def eliminar_direccion(request, direccion_id):
    direccion = get_object_or_404(Direccion, id=direccion_id, cliente__usuario=request.user)
    
    if request.method == 'POST':
        direccion.delete()
        messages.success(request, "Dirección eliminada correctamente.")
    
    return redirect('usuarios:perfil')

@login_required
def agregar_metodo_pago(request):
    if request.method == 'POST':
        form = MetodoPagoForm(request.POST)
        if form.is_valid():
            metodo_pago = form.save(commit=False)
            metodo_pago.usuario = request.user
            metodo_pago.save()
            messages.success(request, "Método de pago agregado correctamente.")
            return redirect('usuarios:perfil')
    else:
        form = MetodoPagoForm()
    
    return render(request, 'usuarios/agregar_metodo_pago.html', {'form': form})

@login_required
def editar_metodo_pago(request, metodo_id):
    metodo_pago = get_object_or_404(MetodoPago, id=metodo_id, usuario=request.user)
    
    if request.method == 'POST':
        form = MetodoPagoForm(request.POST, instance=metodo_pago)
        if form.is_valid():
            form.save()
            messages.success(request, "Método de pago actualizado correctamente.")
            return redirect('usuarios:perfil')
    else:
        form = MetodoPagoForm(instance=metodo_pago)
    
    return render(request, 'usuarios/editar_metodo_pago.html', {'form': form})

@login_required
def eliminar_metodo_pago(request, metodo_id):
    metodo_pago = get_object_or_404(MetodoPago, id=metodo_id, usuario=request.user)
    
    if request.method == 'POST':
        metodo_pago.delete()
        messages.success(request, "Método de pago eliminado correctamente.")
    
    return redirect('usuarios:perfil')

@login_required
def carrito(request):
    carrito = request.session.get('carrito', {})
    total = sum(item['subtotal'] for item in carrito.values())
    
    return render(request, 'usuarios/carrito.html', {
        'carrito': carrito,
        'total': total
    })

@login_required
def agregar_al_carrito(request, producto_id):
    producto = get_object_or_404(Producto, id_producto=producto_id)
    
    if request.method == 'POST':
        cantidad = int(request.POST.get('cantidad', 1))
        meses = int(request.POST.get('meses', 1))
        
        if cantidad <= 0 or meses <= 0:
            messages.error(request, "La cantidad y los meses deben ser mayores a cero.")
            return redirect('productos:detalle_producto', producto_id=producto_id)
        
        if cantidad > producto.cantidad:
            messages.error(request, f"Solo hay {producto.cantidad} unidades disponibles.")
            return redirect('productos:detalle_producto', producto_id=producto_id)
        
        carrito = request.session.get('carrito', {})
        
        # Crear un ID único para este ítem (combinación de producto_id, meses)
        item_id = f"{producto_id}_{meses}"
        
        if item_id in carrito:
            # Si ya existe este ítem con estos meses, actualizar la cantidad
            nueva_cantidad = carrito[item_id]['cantidad'] + cantidad
            if nueva_cantidad > producto.cantidad:
                messages.error(request, f"No puedes agregar más de {producto.cantidad} unidades.")
                return redirect('productos:detalle_producto', producto_id=producto_id)
            
            carrito[item_id]['cantidad'] = nueva_cantidad
            carrito[item_id]['subtotal'] = nueva_cantidad * producto.precio * meses
        else:
            # Agregar nuevo ítem al carrito
            subtotal = cantidad * producto.precio * meses
            
            carrito[item_id] = {
                'producto_id': producto_id,
                'nombre': producto.nombre,
                'precio': float(producto.precio),
                'cantidad': cantidad,
                'meses': meses,
                'subtotal': float(subtotal),
                'imagen': producto.imagen.url if producto.imagen else None,
            }
        
        request.session['carrito'] = carrito
        messages.success(request, f"{producto.nombre} agregado al carrito.")
        
        # Redirigir según el parámetro next o al carrito por defecto
        next_url = request.POST.get('next')
        if next_url:
            return redirect(next_url)
        return redirect('usuarios:carrito')
    
    return redirect('productos:detalle_producto', producto_id=producto_id)

@login_required
def actualizar_carrito(request):
    if request.method == 'POST':
        carrito = request.session.get('carrito', {})
        
        for key, value in request.POST.items():
            if key.startswith('cantidad_'):
                item_id = key.replace('cantidad_', '')
                try:
                    nueva_cantidad = int(value)
                    if item_id in carrito and nueva_cantidad > 0:
                        # Obtener el producto para verificar stock
                        producto_id = carrito[item_id]['producto_id']
                        producto = get_object_or_404(Producto, id_producto=producto_id)
                        
                        if nueva_cantidad > producto.cantidad:
                            messages.error(request, f"No hay suficiente stock de {producto.nombre}.")
                            continue
                        
                        carrito[item_id]['cantidad'] = nueva_cantidad
                        carrito[item_id]['subtotal'] = nueva_cantidad * carrito[item_id]['precio'] * carrito[item_id]['meses']
                except ValueError:
                    pass
        
        request.session['carrito'] = carrito
        messages.success(request, "Carrito actualizado correctamente.")
    
    return redirect('usuarios:carrito')

@login_required
def eliminar_del_carrito(request, item_id):
    carrito = request.session.get('carrito', {})
    
    if item_id in carrito:
        del carrito[item_id]
        request.session['carrito'] = carrito
        messages.success(request, "Producto eliminado del carrito.")
    
    return redirect('usuarios:carrito')

@login_required
def vaciar_carrito(request):
    if request.method == 'POST':
        request.session['carrito'] = {}
        messages.success(request, "Carrito vaciado correctamente.")
    
    return redirect('usuarios:carrito')

@login_required
def checkout(request):
    carrito = request.session.get('carrito', {})
    if not carrito:
        messages.error(request, "Tu carrito está vacío.")
        return redirect('usuarios:carrito')
    
    cliente = Cliente.objects.get(usuario=request.user)
    direcciones = Direccion.objects.filter(cliente=cliente)
    
    if request.method == 'POST':
        direccion_id = request.POST.get('direccion')
        notas = request.POST.get('notas', '')
        
        if not direccion_id:
            messages.error(request, "Debes seleccionar una dirección de entrega.")
            return render(request, 'usuarios/checkout.html', {
                'carrito': carrito,
                'direcciones': direcciones,
                'total': sum(item['subtotal'] for item in carrito.values())
            })
        
        try:
            direccion = Direccion.objects.get(id=direccion_id, cliente=cliente)
            
            # Crear el pedido
            pedido = Pedido(
                cliente=cliente,
                direccion_entrega=f"{direccion.calle}, {direccion.ciudad}, {direccion.departamento}",
                notas=notas
            )
            pedido.save()
            
            # Crear los detalles del pedido
            for item_id, item in carrito.items():
                producto = Producto.objects.get(id_producto=item['producto_id'])
                
                # Verificar stock
                if item['cantidad'] > producto.cantidad:
                    messages.error(request, f"No hay suficiente stock de {producto.nombre}.")
                    pedido.delete()  # Eliminar el pedido si hay problemas
                    return redirect('usuarios:carrito')
                
                DetallePedido.objects.create(
                    pedido=pedido,
                    producto=producto,
                    cantidad=item['cantidad'],
                    precio_unitario=producto.precio,
                    meses_renta=item['meses'],
                    subtotal=item['subtotal']
                )
                
                # Actualizar inventario
                producto.cantidad -= item['cantidad']
                producto.save()
            
            # Guardar total en el pedido
            pedido.total = sum(item['subtotal'] for item in carrito.values())
            pedido.save()
            
            # Limpiar carrito
            request.session['carrito'] = {}
            
            # Generar recibo
            return redirect('usuarios:generar_recibo_pdf', pedido_id=pedido.id_pedido)
        
        except Exception as e:
            messages.error(request, f"Error al procesar el pedido: {str(e)}")
            return redirect('usuarios:carrito')
    
    context = {
        'carrito': carrito,
        'direcciones': direcciones,
        'total': sum(item['subtotal'] for item in carrito.values())
    }
    return render(request, 'usuarios/checkout.html', context)

@login_required
def mis_pedidos(request):
    cliente = Cliente.objects.get(usuario=request.user)
    pedidos = Pedido.objects.filter(cliente=cliente).order_by('-fecha')
    
    return render(request, 'usuarios/mis_pedidos.html', {'pedidos': pedidos})

@login_required
def detalle_pedido(request, pedido_id):
    cliente = Cliente.objects.get(usuario=request.user)
    pedido = get_object_or_404(Pedido, id_pedido=pedido_id, cliente=cliente)
    detalles = pedido.detalles.all()
    
    return render(request, 'usuarios/detalle_pedido.html', {
        'pedido': pedido,
        'detalles': detalles
    })

@login_required
def generar_recibo_pdf(request, pedido_id):
    """
    Genera un PDF con el recibo del pedido
    """
    # Obtener el pedido
    if request.user.rol in ['admin', 'empleado']:
        pedido = get_object_or_404(Pedido, id_pedido=pedido_id)
    else:
        cliente = Cliente.objects.get(usuario=request.user)
        pedido = get_object_or_404(Pedido, id_pedido=pedido_id, cliente=cliente)
    
    # Crear el PDF
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename="recibo_pedido_{pedido_id}.pdf"'
    
    buffer = BytesIO()
    p = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter
    
    # Logo de la empresa
    logo_path = os.path.join(settings.MEDIA_ROOT, 'productos', 'Logo-Teinco-Color.webp')
    if os.path.exists(logo_path):
        p.drawInlineImage(logo_path, 40, height - 100, width=150, height=80)
    
    # Título del recibo
    p.setFont("Helvetica-Bold", 18)
    p.drawString(width/2 - 50, height - 50, "RECIBO DE PEDIDO")
    p.setFont("Helvetica", 12)
    p.drawString(width/2 - 50, height - 70, f"Pedido #{pedido.id_pedido}")
    
    # Información de la empresa
    p.setFont("Helvetica-Bold", 10)
    p.drawString(40, height - 120, "MULTIADAMIOS S.A.S")
    p.setFont("Helvetica", 9)
    p.drawString(40, height - 135, "NIT: 900.252.510-1")
    p.drawString(40, height - 150, "Cra. 128 #22A-45, Bogotá")
    p.drawString(40, height - 165, "Tel: +57 310 574 2020")
    
    # Información del cliente
    p.setFont("Helvetica-Bold", 10)
    p.drawString(300, height - 120, "CLIENTE:")
    p.setFont("Helvetica", 9)
    p.drawString(300, height - 135, f"Nombre: {pedido.cliente.usuario.get_full_name()}")
    p.drawString(300, height - 150, f"Identif: {pedido.cliente.usuario.numero_identidad}")
    p.drawString(300, height - 165, f"Dirección: {pedido.direccion_entrega}")
    
    # Información del pedido
    p.setFont("Helvetica-Bold", 10)
    p.line(40, height - 180, width - 40, height - 180)
    p.drawString(40, height - 200, "DETALLE DEL PEDIDO")
    p.line(40, height - 205, width - 40, height - 205)
    
    # Cabecera de la tabla
    y = height - 225
    p.setFont("Helvetica-Bold", 9)
    p.drawString(40, y, "Producto")
    p.drawString(220, y, "Cantidad")
    p.drawString(280, y, "Meses")
    p.drawString(340, y, "Precio/Mes")
    p.drawString(420, y, "Subtotal")
    p.line(40, y - 5, width - 40, y - 5)
    
    # Detalles del pedido
    y -= 20
    p.setFont("Helvetica", 9)
    for detalle in pedido.detalles.all():
        p.drawString(40, y, detalle.producto.nombre[:25])
        p.drawString(220, y, str(detalle.cantidad))
        p.drawString(280, y, str(detalle.meses_renta))
        p.drawRightString(380, y, f"${detalle.precio_unitario:,.0f}")
        p.drawRightString(width - 40, y, f"${detalle.subtotal:,.0f}")
        y -= 15
        if y < 100:  # Si llegamos al final de la página
            p.showPage()
            y = height - 50
            p.setFont("Helvetica-Bold", 10)
            p.drawString(40, y, "DETALLE DEL PEDIDO (cont.)")
            p.line(40, y - 5, width - 40, y - 5)
            y -= 20
            p.setFont("Helvetica", 9)
    
    # Total
    p.line(40, y - 5, width - 40, y - 5)
    p.setFont("Helvetica-Bold", 10)
    p.drawString(350, y - 20, "TOTAL:")
    p.drawRightString(width - 40, y - 20, f"${pedido.total:,.0f}")
    
    # Observaciones
    y -= 40
    p.setFont("Helvetica-Bold", 9)
    p.drawString(40, y, "Observaciones:")
    p.setFont("Helvetica", 9)
    p.drawString(40, y - 15, pedido.notas if pedido.notas else "Sin observaciones")
    
    # Pie de página
    p.drawString(40, y, "Observaciones: Este recibo acompaña la entrega de los productos. Verifique y firme.")

    p.showPage()
    p.save()
    return response

def procesar_pedido(request):
    """
    Process the order from the cart and create a new Pedido instance
    """
    carrito = request.session.get('carrito', {})
    if not carrito:
        raise ValueError("El carrito está vacío")
    
    # Obtener el objeto Cliente relacionado con el Usuario
    try:
        cliente = Cliente.objects.get(usuario=request.user)
    except Cliente.DoesNotExist:
        raise ValueError("No se encontró un cliente asociado al usuario")
    
    return pedido

@login_required
def pago_recibo(request):
    if not request.user.is_authenticated:
        return redirect('usuarios:login')
    
    carrito = request.session.get('carrito', {})
    if not carrito:
        return redirect('productos:catalogo_productos')
    
    total = sum(item['subtotal'] for item in carrito.values())
    
    # Datos de la empresa
    emisor = {
        'nombre': 'Multiandamios',
        'nif': '900.252.510-1',
        'direccion': 'Cra. 128 #22A-45, Bogotá, Colombia',
        'telefono': '+57 310 574 2020',
        'email': 'info@multiandamios.co',
        'web': 'https://multiandamios.co/'
    }
    
    # Datos bancarios para transferencias
    datos_bancarios = {
        'banco': 'Banco de Bogotá',
        'tipo_cuenta': 'Cuenta Corriente',
        'numero_cuenta': '123456789',
        'titular': 'MULTIANDAMIOS S.A.S.',
        'nit': '900.252.510-1'
    }
    
    if request.method == 'POST':
        pago_form = MetodoPagoForm(request.POST, request.FILES)
        if pago_form.is_valid():
            try:
                # Guardar el método de pago
                metodo_pago = pago_form.save(commit=False)
                metodo_pago.usuario = request.user
                metodo_pago.save()
                
                # Crear el pedido
                pedido = procesar_pedido(request)
                
                # Limpiar el carrito
                request.session['carrito'] = {}
                # Redirigir a confirmación
                return redirect('usuarios:confirmacion_pago', pedido_id=pedido.id_pedido)
            except Exception as e:
                messages.error(request, f'Error al procesar el pago: {str(e)}')
                return redirect('usuarios:carrito')
    else:
        pago_form = MetodoPagoForm()
    
    context = {
        'carrito': carrito,
        'total': total,
        'emisor': emisor,
        'datos_bancarios': datos_bancarios,
        'pago_form': pago_form,  # Agregar el formulario al contexto
    }
    
    return render(request, 'usuarios/pago.html', context)

@login_required
def confirmacion_pago(request, pedido_id):
    pedido = get_object_or_404(Pedido, id_pedido=pedido_id, cliente__usuario=request.user)
    context = {
        'pedido': pedido,
        'detalles': pedido.detalles.all()
    }
    return render(request, 'usuarios/confirmacion_pago.html', context)
